# -*- coding: utf-8 -*-
"""NumpyNotes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dR8vRQjTxkNOr5uRJkehzKjVSXt0_wFw
"""

# CREATE ARRAY USING NUMPY
import numpy as np

# ONE DIMENSIONAL ARRAY
a=np.array([1,2,3,4,5])
a

# CREATE ARRAY BY USER INPUT
a=[]
n=int(input("enter your size of array"))
for i in range(n):
  val=int(input("enter number"))
  a.append(val)
myarr=np.array(a)
myarr

# TWO DIMENSIONAL ARRAY
a=np.array([[1,2,3],[4,5,6],[7,8,9]])
print(a)
print("Dimensions of array",a.ndim)
print("Shape of array",a.shape)

# NUMPY FUNCTIONS
# 1. zeros => This function creates an array and fill all the values with zero(0).
z=np.zeros((2,3))
z

# 2. ones => This function creates an array and fill all the values with ones(1).
o=np.ones(5)
o

# 3. eye => This function creates an array with all the diagonal elements as 1 and rest as 0.
e=np.eye(3)
e

# 4. diag => This function creates a two dimensional array with all the diagonal elements as the given value and rest as 0.
d=np.diag([1,2,3,4,5])
d

# To get the diagonal elements in two dimensional array we use diag as a function.
arr=np.diag([1,2,3,4,5])
np.diag(arr)

# randint => This function is used to generate a random number between a given range.
# syntax : rand(min,max,total_values)
r=np.random.randint(1,11,5)
r

# rand => This function is used to generate a random values between 0 to 1.
# syntax : rand(number_of values)
r1=np.random.rand(5)
r1

# We may generate random numbers in 2D array format as well.
r2=np.random.rand(2,3)
r2

# randn => This function is used to generate a random values close to 0. This may return positive or negative numbers as well.
# syntax : randn(number_of_values)
r3=np.random.randn(3)
r3

# INDEXING IN 1D ARRAY
a=[]
n=int(input("how many numbers you want"))
for i in range(n):
  var=int(input("numbers"))
  a.append(var)
arr=np.array(a)
for i in range(arr.size):
  print(arr[i])
sum=0
for i in range(arr.size):
  sum=sum+arr[i]
print("Sum of array elements=",sum)

# SLICING IN 1D ARRAY
a=[]
n=int(input("how many numbers you want"))
for i in range(n):
  var=int(input("numbers"))
  a.append(var)
arr=np.array(a)
for i in range(arr.size):
  print(arr[i])
# slicing
arr1=arr[2:4]
print(arr1)

# RESHAPING OF ARRAY
arr=np.random.randint(1,100,12)
arr1=arr.reshape(2,6)
arr1

# SEED FUNCTION
# We know that randint() generates random numbers.Everytime we run the program,new set of random number is generated.
# But what if we want to fix the generation of this random number.In this case we use seed().
np.random.seed(1)
s=np.random.randint(1,11,5)
s

# VIEW VS COPY
# When we slice a sub-array from an array,it may be done by two ways.
# First is by making view and second is using a copy of it.
# But there is some difference between both of them.
# If you make a view of an array,any changes made to the sub array will be replicated to the original array.
# Whereas, if you make a copy , any changes made of copied sub array will not reflect on the original array.

# view
a=np.array([1,2,3,4,5,6,7,8,9])
b=a[3:6]
b[:]=0
a

# copy
a=np.array([1,2,3,4,5,6,7,8,9])
b=a[3:6].copy()
b[:]=0
a

# CONDITIONAL SELECTION
a=np.arange(1,16)
a>10

a[a%2==0]

a<5

a[a<5]=0
a

# OPERATIONS ON ARRAY
# In numpy array divide by zero gives infinity and not an error.
a=np.arange(1,5)
a

a*2

a+2

a**2

# SOME MORE FUNCTIONS IN NUMPY
arr=np.array([10,20,30,40,50])
np.min(arr) # Returns the minimum number

np.max(arr) # Returns the maximum number

np.argmin(arr) # Position of minimum number

np.argmax(arr) # Position of maximum number

np.sqrt(arr) # Square root of every number

np.sin(arr) # Sin value of every number

np.cos(arr) # Cos value of every number

# linspace() returns values between a given range and with a same gap between consecutive elements
np.linspace(1,3,5) # min,max,total_value

np.cumsum(arr)

a=np.array([1,1,2,3,4,4,6,5,7,7,9])
np.unique(a)

np.unique(a).size

np.unique(a,return_index=True,return_counts=True)

# STACKING
a1=np.array([1,2,3,4,5])
a2=np.array([6,7,8,9,10])

np.hstack(a1)

np.vstack(a2)

